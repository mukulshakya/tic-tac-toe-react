{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","x","o","playerTurns","setPlayerTurns","isXTurn","setIsXTurn","playState","setPlayState","winner","setWinner","winningCombinations","resetState","useEffect","lastPlayer","length","some","combination","every","val","includes","alert","className","onClick","map","e","i","Array","fill","_","j","squareNum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA2EeA,MAxEf,WAAgB,IAAD,EACyBC,mBAAS,CAAEC,EAAG,GAAIC,EAAG,KAD9C,mBACNC,EADM,KACOC,EADP,OAEiBJ,oBAAS,GAF1B,mBAENK,EAFM,KAEGC,EAFH,OAGqBN,mBAAS,IAH9B,mBAGNO,EAHM,KAGKC,EAHL,OAIeR,mBAAS,MAJxB,mBAINS,EAJM,KAIEC,EAJF,KAKPC,EAAsB,CAC1B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHC,EAAa,WACjBR,EAAe,CAAEH,EAAG,GAAIC,EAAG,KAC3BI,GAAW,GACXE,EAAa,IACbE,EAAU,OA8BZ,OAhBAG,qBAAU,WACR,IAAMC,EAAaT,EAAU,IAAM,IACnCF,EAAYW,GAAYC,QAAU,GAChCJ,EAAoBK,MAAK,SAACC,GAAD,OACvBA,EAAYC,OAAM,SAACC,GAAD,OAAShB,EAAYW,GAAYM,SAASD,UAE9DT,EAAUI,KACX,CAACX,IAEJU,qBAAU,WACJJ,IACFY,MAAM,UAAD,OAAWZ,EAAX,UACLG,OAED,CAACH,IAGF,sBAAKa,UAAU,MAAf,UACE,6CACA,wBAAQC,QAASX,EAAjB,mBACA,uBACA,8BACG,CAAC,EAAG,EAAG,GAAGY,KAAI,SAACC,EAAGC,GAAJ,OACb,qBAAKJ,UAAU,mBAAf,SACGK,MAAM,GACJC,KAAK,GACLJ,KAAI,SAACK,EAAGC,GAAJ,OACH,qBAAKR,UAAU,SAASC,QAAS,WAtC5B,IAACQ,EACdxB,EADcwB,EAsC4CN,EAAIC,EAAII,KAnCtEtB,EAAa,2BAAKD,GAAN,kBAAkBwB,EAAY1B,EAAU,IAAM,OAC1DD,EAAe,2BACVD,GADS,kBAEXE,EAAU,IAAM,IAFL,sBAEeF,EAAYE,EAAU,IAAM,MAF3C,CAEiD0B,OAE/DzB,GAAYD,KA8BA,SACGE,EAAUkB,EAAIC,EAAII,IAAM,mBCrD5BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ed2e1d8a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [playerTurns, setPlayerTurns] = useState({ x: [], o: [] });\n  const [isXTurn, setIsXTurn] = useState(true);\n  const [playState, setPlayState] = useState({});\n  const [winner, setWinner] = useState(null);\n  const winningCombinations = [\n    [1, 2, 3],\n    [1, 4, 7],\n    [1, 5, 9],\n    [2, 5, 8],\n    [3, 6, 9],\n    [3, 5, 7],\n    [4, 5, 6],\n    [7, 8, 9],\n  ];\n\n  const resetState = () => {\n    setPlayerTurns({ x: [], o: [] });\n    setIsXTurn(true);\n    setPlayState({});\n    setWinner(null);\n  };\n\n  const fillSquare = (squareNum) => {\n    if (playState[squareNum]) return;\n\n    setPlayState({ ...playState, [squareNum]: isXTurn ? \"x\" : \"o\" });\n    setPlayerTurns({\n      ...playerTurns,\n      [isXTurn ? \"x\" : \"o\"]: [...playerTurns[isXTurn ? \"x\" : \"o\"], squareNum],\n    });\n    setIsXTurn(!isXTurn);\n  };\n\n  useEffect(() => {\n    const lastPlayer = isXTurn ? \"o\" : \"x\";\n    playerTurns[lastPlayer].length >= 3 &&\n      winningCombinations.some((combination) =>\n        combination.every((val) => playerTurns[lastPlayer].includes(val))\n      ) &&\n      setWinner(lastPlayer);\n  }, [playerTurns]);\n\n  useEffect(() => {\n    if (winner) {\n      alert(`Player ${winner} won.`);\n      resetState();\n    }\n  }, [winner]);\n\n  return (\n    <div className=\"App\">\n      <h1>Tic Tac Toe</h1>\n      <button onClick={resetState}>Reset</button>\n      <br />\n      <div>\n        {[1, 3, 5].map((e, i) => (\n          <div className=\"squareRowWrapper\">\n            {Array(3)\n              .fill(0)\n              .map((_, j) => (\n                <div className=\"square\" onClick={() => fillSquare(e + i + j)}>\n                  {playState[e + i + j] || \"\"}\n                </div>\n              ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}